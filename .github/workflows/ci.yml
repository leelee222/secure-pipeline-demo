name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.organization=leelee222
            -Dsonar.projectKey=leelee222_secure-pipeline-demo
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            
      - name: Trivy FS Scan (Dependencies)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        with:
          command: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --redact --exit-code 1
      
      - name: Build Docker image
        run: docker build -t secure-pipeline-demo .

      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: secure-pipeline-demo
          format: table
          ignore-unfixed: true
          exit-code: 1
          severity: HIGH,CRITICAL

  build-scan-push:
    runs-on: ubuntu-latest
    needs: build-test-and-analyze
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and tag image
        env:
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMG=${DOCKERHUB_REPO}:${IMAGE_TAG}
          docker build -t $IMG .
          docker tag $IMG ${DOCKERHUB_REPO}:latest

      - name: Trivy Image Scan
        env:
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}
          format: table
          ignore-unfixed: true
          exit-code: 1
          severity: HIGH,CRITICAL

      - name: Push image to Docker Hub
        env:
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}
          docker push ${DOCKERHUB_REPO}:latest

      - name: Install cosign
        run: |
          curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

      - name: Cosign sign (optional, keyless)
        if: success()
        env:
          COSIGN_EXPERIMENTAL: "1"
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO }}
          IMAGE_TAG: ${{ github.sha }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
        run: |
          cosign sign --key ${COSIGN_KEY} ${DOCKERHUB_REPO}:${IMAGE_TAG} || true
